{"wrkspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><block type=\"v5_events_when_started\" id=\"}QP2cOl_tbE$vLGL2SdR\" x=\"390\" y=\"-30\"><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"VJgvj.HjxP:zh=4Nt4)E\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\".BEpy/|(BA1Ss[Tdw-T$\"><field name=\"NUM\">75</field></shadow></value><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"x*`OG})$6ECNN(57vdm5\"><field name=\"UNITS\">rpm</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"X,NE6lr^sGQC]UII^^f%\"><field name=\"NUM\">300</field></shadow></value></block></next></block></next></block><block type=\"v5_events_when_started\" id=\"s#[%~xvCu)/q.0`x@N9A\" x=\"750\" y=\"-30\"><next><block type=\"v5_drivetrain_set_turn_velocity\" id=\"MS]/KD9^hN)b_9=IMqU{\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"r@smA11zvsvXY_G^L9eS\"><field name=\"NUM\">75</field></shadow></value><next><block type=\"v5_drivetrain_set_turn_velocity\" id=\"t79-cfbiA%{.ea{UE[X,\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"bB07-s/#P]`oX#JOZ8`u\"><field name=\"NUM\">300</field></shadow></value></block></next></block></next></block><block type=\"v5_events_when_driver\" id=\"DiBr^:E):_C)!F^y^]aP\" x=\"370\" y=\"170\"><next><block type=\"v5_motion_set_motor_velocity\" id=\".n~KO^#jj,W)JqqrhcAs\"><field name=\"MOTOR\">ArmMotor1</field><field name=\"UNITS\">rpm</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"*aru/Tl/gV%XiP?!@wrP\"><field name=\"NUM\">300</field></shadow></value><next><block type=\"v5_motion_set_motor_velocity\" id=\"I*ptbZSWN5Qk6b2y8Z6Y\"><field name=\"MOTOR\">ArmMotor1</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"gWn6!6T~#.^C.cK6DGO]\"><field name=\"NUM\">65</field></shadow></value><next><block type=\"v5_motion_set_motor_velocity\" id=\"~U0d)c:Wa+,K+{s}!E@5\"><field name=\"MOTOR\">ArmMotor2</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"^^Xyk@W!hKky6z%8M+.r\"><field name=\"NUM\">65</field></shadow></value><next><block type=\"v5_motion_set_motor_velocity\" id=\"oKg:EPg%!g/qB=H4j[fQ\"><field name=\"MOTOR\">ArmMotor2</field><field name=\"UNITS\">rpm</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"2lj8^()i6=O4}u/Be@-O\"><field name=\"NUM\">300</field></shadow></value></block></next></block></next></block></next></block></next></block><block type=\"v5_events_when_driver\" id=\"g*bHRj8/[t@FUF*0*KCQ\" x=\"330\" y=\"210\"><next><block type=\"v5_control_if_then_else\" id=\"krq4[TXyauE8yd;gfb5)\"><value name=\"CONDITION\"><block type=\"v5_sensing_pressing_controller\" id=\"7DTU$lX{`bRpyRdLE[?u\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonDown</field></block></value><statement name=\"SUBSTACK\"><block type=\"v5_motion_spin\" id=\"n*n2ilC4bDCUg+=?IE#A\"><field name=\"MOTOR\">ClawMotor1</field><field name=\"DIRECTION\">rev</field><next><block type=\"v5_motion_spin\" id=\"+HlE{;|UdG,|^jb[x*_J\"><field name=\"MOTOR\">ClawMotor2</field><field name=\"DIRECTION\">rev</field></block></next></block></statement><statement name=\"SUBSTACK2\"><block type=\"v5_motion_stop_motor\" id=\"n;@sh8*UA#*oaFUhNnUF\"><field name=\"MOTOR\">ArmMotor1</field><next><block type=\"v5_motion_stop_motor\" id=\"5itn*Fa2(F%`/{h_vK$0\"><field name=\"MOTOR\">ArmMotor2</field></block></next></block></statement></block></next></block><block type=\"v5_events_when_driver\" id=\"mF_+VX;|ds~!DXY7ylQ?\" x=\"830\" y=\"250\"><next><block type=\"v5_control_if_then_else\" id=\"D.F$nVuppQgHiRQycrc]\"><value name=\"CONDITION\"><block type=\"v5_sensing_pressing_controller\" id=\"xewB^0yfqFu}fD+Wp:3^\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonUp</field></block></value><statement name=\"SUBSTACK\"><block type=\"v5_motion_spin\" id=\"tR9qGc(FCa5IFfj(a!JJ\"><field name=\"MOTOR\">ClawMotor1</field><field name=\"DIRECTION\">fwd</field><next><block type=\"v5_motion_spin\" id=\"$jO4/bU@=?HBRhHISC7;\"><field name=\"MOTOR\">ClawMotor2</field><field name=\"DIRECTION\">fwd</field></block></next></block></statement><statement name=\"SUBSTACK2\"><block type=\"v5_motion_stop_motor\" id=\"8m!EXmi3`VIZ3r_`+`LP\"><field name=\"MOTOR\">ArmMotor1</field><next><block type=\"v5_motion_stop_motor\" id=\"M:=e:HRke,}[E(||V1wA\"><field name=\"MOTOR\">ArmMotor2</field></block></next></block></statement></block></next></block><block type=\"v5_events_when_autonomous\" id=\"q(;bdh:`WnfC6,=*c]^L\" x=\"10\" y=\"310\"><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"(C4?BbAjHJ-Kjd81`1fD\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"BoKY*YLbMgE(WdV)BIQX\"><field name=\"NUM\">75</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"u*e=H@*U_MwIa::=$nU8\"><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"!!y.ycu%iuw+:5wSzj9A\"><field name=\"NUM\">20</field></shadow></value><next><block type=\"v5_control_wait\" id=\"_u-t;bdXxn7DaNFaYB}z\"><value name=\"DURATION\"><shadow type=\"math_positive_number\" id=\"Ae%lNIea|,!CqAPNIfr;\"><field name=\"NUM\">0.2</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"l1J504^NzFm$WbC+okXf\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"Zx}bi,i|5nnt_.b9|G5p\"><field name=\"NUM\">20</field></shadow></value><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"k|wfw.JK]Xq9DigpG2N:\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"!@vuJ2zWn]PGg(%%rq8y\"><field name=\"NUM\">75</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block><block type=\"v5_events_when_driver\" id=\"IloyW(S%%GR]V*wb4bCv\" x=\"570\" y=\"450\"><next><block type=\"v5_control_if_then_else\" id=\"tzkj8chymyh59}RHh43}\"><value name=\"CONDITION\"><block type=\"v5_sensing_pressing_controller\" id=\"tkapSV{yjG_!?Td]NV;O\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonR2</field></block></value><statement name=\"SUBSTACK\"><block type=\"v5_motion_spin\" id=\";^BjWV]t@)=3M;?**}WG\"><field name=\"MOTOR\">ArmMotor1</field><field name=\"DIRECTION\">fwd</field><next><block type=\"v5_motion_spin\" id=\"d`b,+h)*2~nxY0NjwHb[\"><field name=\"MOTOR\">ArmMotor2</field><field name=\"DIRECTION\">fwd</field></block></next></block></statement><statement name=\"SUBSTACK2\"><block type=\"v5_motion_stop_motor\" id=\"nO5-B:67DJr^3-..S({g\"><field name=\"MOTOR\">ArmMotor1</field><next><block type=\"v5_motion_stop_motor\" id=\"cscoImRAHfO^5JcIQ%dR\"><field name=\"MOTOR\">ArmMotor2</field></block></next></block></statement></block></next></block></xml>","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","setting":{"left":"ArmMotor1","leftDir":"false","right":"ArmMotor2","rightDir":"false","upDown":"ClawMotor1","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"}},{"port":[12,11,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"rev","gyroType":"none","width":"295","unit":"mm","wheelbase":"165","wheelbaseUnit":"mm"}},{"port":[17],"name":"ArmMotor1","customName":true,"deviceType":"Motor","setting":{"reversed":"false","fwd":"Up","rev":"Down","gear":"ratio36_1"}},{"port":[20],"name":"ArmMotor2","customName":true,"deviceType":"Motor","setting":{"reversed":"false","fwd":"Up","rev":"Down","gear":"ratio36_1"}},{"port":[9],"name":"ClawMotor1","customName":true,"deviceType":"Motor","setting":{"reversed":"false","fwd":"Open","rev":"Close","gear":"ratio36_1"}},{"port":[10],"name":"ClawMotor2","customName":true,"deviceType":"Motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"}}],"slot":0,"cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"v5.h\"\n#include \"v5_cpp.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nvex::competition Competition;\n\ncontroller Controller1 = controller(primary);\nmotor LeftDriveSmart = motor(PORT12, ratio18_1, true);\nmotor RightDriveSmart = motor(PORT11, ratio18_1, false);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 165, mm, 1);\nmotor ArmMotor1 = motor(PORT17, ratio36_1, false);\n\nmotor ArmMotor2 = motor(PORT20, ratio36_1, false);\n\nmotor ClawMotor1 = motor(PORT9, ratio36_1, false);\n\nmotor ClawMotor2 = motor(PORT10, ratio36_1, false);\n\n\n//Vision sensor index vars.\nint Vision1_objectIndex = 0;\n\nint Brain_precision, Controller1_precision;\n\n\n// Generated code.\n\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1LeftShoulderControlMotorsStopped = true;\nbool Controller1RightShoulderControlMotorsStopped = true;\nbool Controller1UpDownButtonsControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_callback_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis1\n      // right = Axis3 - Axis1\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis1.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis1.position();\n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor next time the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonL1/ButtonL2 status to control ArmMotor1\n      if (Controller1.ButtonL1.pressing()) {\n        ArmMotor1.spin(forward);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonL2.pressing()) {\n        ArmMotor1.spin(reverse);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (!Controller1LeftShoulderControlMotorsStopped) {\n        ArmMotor1.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1LeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonR1/ButtonR2 status to control ArmMotor2\n      if (Controller1.ButtonR1.pressing()) {\n        ArmMotor2.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        ArmMotor2.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        ArmMotor2.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n      // check the Up/Down Buttons status to control ClawMotor1\n      if (Controller1.ButtonUp.pressing()) {\n        ClawMotor1.spin(forward);\n        Controller1UpDownButtonsControlMotorsStopped = false;\n      } else if (Controller1.ButtonDown.pressing()) {\n        ClawMotor1.spin(reverse);\n        Controller1UpDownButtonsControlMotorsStopped = false;\n      } else if (!Controller1UpDownButtonsControlMotorsStopped){\n        ClawMotor1.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1UpDownButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\n\nfloat myVariable;\n\nint whenStarted1() {\n  Drivetrain.setDriveVelocity(75.0, vex::velocityUnits::pct);\n  Drivetrain.setDriveVelocity(300.0, vex::velocityUnits::rpm);\nreturn 0;\n}\n\nint whenStarted2() {\n  Drivetrain.setTurnVelocity(75.0, vex::velocityUnits::pct);\n  Drivetrain.setTurnVelocity(300.0, vex::velocityUnits::pct);\nreturn 0;\n}\n\nint ondriver_drivercontrol_0() {\n  ArmMotor1.setVelocity(300.0, vex::velocityUnits::rpm);\n  ArmMotor1.setVelocity(65.0, vex::velocityUnits::pct);\n  ArmMotor2.setVelocity(65.0, vex::velocityUnits::pct);\n  ArmMotor2.setVelocity(300.0, vex::velocityUnits::rpm);\nreturn 0;\n}\n\nint ondriver_drivercontrol_1() {\n  if (Controller1.ButtonDown.pressing()) {\n    ClawMotor1.spin(vex::directionType::rev);\n    ClawMotor2.spin(vex::directionType::rev);\n  } else {\n    ArmMotor1.stop();\n    ArmMotor2.stop();\n  }\nreturn 0;\n}\n\nint ondriver_drivercontrol_2() {\n  if (Controller1.ButtonUp.pressing()) {\n    ClawMotor1.spin(vex::directionType::fwd);\n    ClawMotor2.spin(vex::directionType::fwd);\n  } else {\n    ArmMotor1.stop();\n    ArmMotor2.stop();\n  }\nreturn 0;\n}\n\nint onauton_autonomous_0() {\n  Drivetrain.setDriveVelocity(75.0, vex::velocityUnits::pct);\n  Drivetrain.driveFor(vex::directionType::rev, 20.0, vex::distanceUnits::in, true);\n  wait(0.2, seconds);\n  Drivetrain.driveFor(vex::directionType::fwd, 20.0, vex::distanceUnits::in, true);\n  Drivetrain.setDriveVelocity(75.0, vex::velocityUnits::pct);\nreturn 0;\n}\n\nint ondriver_drivercontrol_3() {\n  if (Controller1.ButtonR2.pressing()) {\n    ArmMotor1.spin(vex::directionType::fwd);\n    ArmMotor2.spin(vex::directionType::fwd);\n  } else {\n    ArmMotor1.stop();\n    ArmMotor2.stop();\n  }\nreturn 0;\n}\nvoid VEXcode_driver_task() {\n// Start the driver control tasks....\nvex::task drive0(ondriver_drivercontrol_0);\nvex::task drive1(ondriver_drivercontrol_1);\nvex::task drive2(ondriver_drivercontrol_2);\nvex::task drive3(ondriver_drivercontrol_3);\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_callback_Controller1);\nwhile(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\ndrive0.stop();\ndrive1.stop();\ndrive2.stop();\ndrive3.stop();\nreturn;\n}\n\nvoid VEXcode_auton_task() {\n// Start the auton control tasks....\nvex::task auto0(onauton_autonomous_0);\nwhile( Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\nauto0.stop();\nreturn;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  srand(vex::timer::system());\n\n\n\n  // pre event registration\n  // register event handlers\n\n  task::sleep(15);\n  // post event registration\n\n  // when started blocks...\n  vex::task ws1(whenStarted2);\n  whenStarted1();\n  return 0;\n}","cppStatus":"true","platform":"V5","sdkVersion":"20200203.11.00.00","appVersion":"1.0.9-45","fileFormat":"0.1.1","icon":""}