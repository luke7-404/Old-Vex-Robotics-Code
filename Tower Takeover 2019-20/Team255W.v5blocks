{"wrkspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable><variable type=\"\" id=\"PCaY`pmsP;eJEbo26Ql7\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">Time</variable></variables><block type=\"v5_events_when_autonomous\" id=\"N{KRgiLsYa~p(:K;!gN:\" x=\"130\" y=\"730\"><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"};YZ*)senEw*L1h.O[h=\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"2rhQv?rlAF1xC~w[V+B+\"><field name=\"NUM\">75</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"##Mo.+hAdq?:,_v#J}Wy\"><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"1}h@Q2i1dh6lx9KLx`d-\"><field name=\"NUM\">17</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"=|!a)4mi3YA+s_V8s;.Y\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"R9~n)iQRK*4_j![P[~7w\"><field name=\"NUM\">17</field></shadow></value><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"H2gyMa7l*PUu{+JN=t:]\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"0b0!AN8sz%(+4yK#.(+3\"><field name=\"NUM\">75</field></shadow></value><next><block type=\"v5_motion_stop_driving\" id=\"HH$7D;7HYhN{[E]=|.I!\"></block></next></block></next></block></next></block></next></block></next></block><block type=\"v5_events_when_driver\" id=\"69z;a2:v2:`fHASHEm(V\" x=\"610\" y=\"770\"><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\":p#9ZBh:6[1U7|{zYOiU\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"4]}Oswgd/9X`^Zax)xsV\"><field name=\"NUM\">75</field></shadow></value><next><block type=\"v5_drivetrain_set_turn_velocity\" id=\"WV+OHMX,[qZmizR`4Kr*\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"Of,)%x`z]*6OFNa#wR@l\"><field name=\"NUM\">75</field></shadow></value><next><block type=\"v5_drivetrain_set_turn_velocity\" id=\"SO7M*eClo,d._f@%ddd(\"><field name=\"UNITS\">rpm</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"yEQucXAKBVkedrmHig/i\"><field name=\"NUM\">300</field></shadow></value><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"8UIr77U~:-~hw-g1V,^D\"><field name=\"UNITS\">rpm</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"J~0,DlC-m#R/2ViN79Z,\"><field name=\"NUM\">300</field></shadow></value></block></next></block></next></block></next></block></next></block></xml>","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"tank","id":"primary"}},{"port":[],"name":"Controller2","customName":false,"deviceType":"Controller","setting":{"left":"ArmMotor1","leftDir":"false","right":"ArmMotor2","rightDir":"false","upDown":"ClawMotor","upDownDir":"false","xB":"Stablelizer","xBDir":"false","drive":"none","id":"partner"}},{"port":[1,2,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:2","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"165","wheelbaseUnit":"mm","hasGyro":"false"}},{"port":[3],"name":"ArmMotor1","customName":true,"deviceType":"Motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"}},{"port":[5],"name":"ArmMotor2","customName":true,"deviceType":"Motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"}},{"port":[6],"name":"ClawMotor","customName":true,"deviceType":"Motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"}},{"port":[8],"name":"Stablelizer","customName":true,"deviceType":"Motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"}}],"slot":0,"cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"v5.h\"\n#include \"v5_cpp.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nvex::competition Competition;\n\ncontroller Controller1 = controller(primary);\ncontroller Controller2 = controller(partner);\nmotor LeftDriveSmart = motor(PORT1, ratio18_1, false);\nmotor RightDriveSmart = motor(PORT2, ratio18_1, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 165, mm, 0.5);\nmotor ArmMotor1 = motor(PORT3, ratio18_1, false);\n\nmotor ArmMotor2 = motor(PORT5, ratio18_1, false);\n\nmotor ClawMotor = motor(PORT6, ratio36_1, false);\n\nmotor Stablelizer = motor(PORT8, ratio18_1, false);\n\n\n//Vision sensor index vars.\nint Vision1_objectIndex = 0;\n\nint Brain_precision, Controller1_precision, Controller2_precision;\n\n\n// Generated code.\n\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_callback_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3\n      // right = Axis2\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position();\n      int drivetrainRightSideSpeed = Controller1.Axis2.position();\n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor next time the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\n// define variables used for controlling motors based on controller inputs\nbool Controller2LeftShoulderControlMotorsStopped = true;\nbool Controller2RightShoulderControlMotorsStopped = true;\nbool Controller2UpDownButtonsControlMotorsStopped = true;\nbool Controller2XBButtonsControlMotorsStopped = true;\n\n// define a task that will handle monitoring inputs from Controller2\nint rc_auto_loop_callback_Controller2() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // check the ButtonL1/ButtonL2 status to control ArmMotor1\n      if (Controller2.ButtonL1.pressing()) {\n        ArmMotor1.spin(forward);\n        Controller2LeftShoulderControlMotorsStopped = false;\n      } else if (Controller2.ButtonL2.pressing()) {\n        ArmMotor1.spin(reverse);\n        Controller2LeftShoulderControlMotorsStopped = false;\n      } else if (!Controller2LeftShoulderControlMotorsStopped) {\n        ArmMotor1.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller2LeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonR1/ButtonR2 status to control ArmMotor2\n      if (Controller2.ButtonR1.pressing()) {\n        ArmMotor2.spin(forward);\n        Controller2RightShoulderControlMotorsStopped = false;\n      } else if (Controller2.ButtonR2.pressing()) {\n        ArmMotor2.spin(reverse);\n        Controller2RightShoulderControlMotorsStopped = false;\n      } else if (!Controller2RightShoulderControlMotorsStopped) {\n        ArmMotor2.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller2RightShoulderControlMotorsStopped = true;\n      }\n      // check the Up/Down Buttons status to control ClawMotor\n      if (Controller2.ButtonUp.pressing()) {\n        ClawMotor.spin(forward);\n        Controller2UpDownButtonsControlMotorsStopped = false;\n      } else if (Controller2.ButtonDown.pressing()) {\n        ClawMotor.spin(reverse);\n        Controller2UpDownButtonsControlMotorsStopped = false;\n      } else if (!Controller2UpDownButtonsControlMotorsStopped){\n        ClawMotor.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller2UpDownButtonsControlMotorsStopped = true;\n      }\n      // check the X/B buttons status to control Stablelizer\n      if (Controller2.ButtonX.pressing()) {\n        Stablelizer.spin(forward);\n        Controller2XBButtonsControlMotorsStopped = false;\n      } else if (Controller2.ButtonB.pressing()) {\n        Stablelizer.spin(reverse);\n        Controller2XBButtonsControlMotorsStopped = false;\n      } else if (!Controller2XBButtonsControlMotorsStopped){\n        Stablelizer.stop();\n        Controller2XBButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\n\nfloat myVariable, Time;\n\nint onauton_autonomous_0() {\n  Drivetrain.setDriveVelocity(75.0, vex::velocityUnits::pct);\n  Drivetrain.driveFor(vex::directionType::rev, 17.0, vex::distanceUnits::in, true);\n  Drivetrain.driveFor(vex::directionType::fwd, 17.0, vex::distanceUnits::in, true);\n  Drivetrain.setDriveVelocity(75.0, vex::velocityUnits::pct);\n  Drivetrain.stop();\nreturn 0;\n}\n\nint ondriver_drivercontrol_0() {\n  Drivetrain.setDriveVelocity(75.0, vex::velocityUnits::pct);\n  Drivetrain.setTurnVelocity(75.0, vex::velocityUnits::pct);\n  Drivetrain.setTurnVelocity(300.0, vex::velocityUnits::rpm);\n  Drivetrain.setDriveVelocity(300.0, vex::velocityUnits::rpm);\nreturn 0;\n}\nvoid VEXcode_driver_task() {\n// Start the driver control tasks....\nvex::task drive0(ondriver_drivercontrol_0);\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_callback_Controller1);\ntask rc_auto_loop_task_Controller2(rc_auto_loop_callback_Controller2);\nwhile(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\ndrive0.stop();\nreturn;\n}\n\nvoid VEXcode_auton_task() {\n// Start the auton control tasks....\nvex::task auto0(onauton_autonomous_0);\nwhile( Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\nauto0.stop();\nreturn;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  srand(vex::timer::system());\n\n\n\n  // pre event registration\n  // register event handlers\n\n  task::sleep(15);\n  // post event registration\n\n  // when started blocks...\n\n  return 0;\n}","cppStatus":"true","platform":"V5","sdkVersion":"20200203.11.00.00","appVersion":"1.0.9-45","fileFormat":"0.1.1","icon":""}