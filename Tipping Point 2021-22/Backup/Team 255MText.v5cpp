{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor leftMotorA = motor(PORT1, ratio18_1, false);\nmotor leftMotorB = motor(PORT2, ratio18_1, false);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT4, ratio18_1, true);\nmotor rightMotorB = motor(PORT5, ratio18_1, true);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 368.29999999999995, 266.7, mm, 1);\n\ncontroller Controller1 = controller(primary);\nmotor LeftArm = motor(PORT20, ratio18_1, true);\n\nmotor RightArm = motor(PORT11, ratio18_1, false);\n\nmotor Intake = motor(PORT15, ratio6_1, true);\n\ncontroller Controller2 = controller(partner);\nmotor Claw = motor(PORT3, ratio36_1, false);\n\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3\n      // right = Axis2\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position();\n      int drivetrainRightSideSpeed = Controller1.Axis2.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\n// define variables used for controlling motors based on controller inputs\nbool Controller2UpDownButtonsControlMotorsStopped = true;\n\n// define a task that will handle monitoring inputs from Controller2\nint rc_auto_loop_function_Controller2() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // check the ButtonUp/ButtonDown status to control Intake\n      if (Controller2.ButtonUp.pressing()) {\n        Intake.spin(forward);\n        Controller2UpDownButtonsControlMotorsStopped = false;\n      } else if (Controller2.ButtonDown.pressing()) {\n        Intake.spin(reverse);\n        Controller2UpDownButtonsControlMotorsStopped = false;\n      } else if (!Controller2UpDownButtonsControlMotorsStopped) {\n        Intake.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller2UpDownButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\ntask rc_auto_loop_task_Controller2(rc_auto_loop_function_Controller2);\n#pragma endregion VEXcode Generated Robot Configuration\n\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\nevent message1 = event();\nevent goal_2 = event();\n\n// \"when driver control\" hat block\nint ondriver_drivercontrol_0() {\n  while (true) {\n    LeftArm.setVelocity(60.0, percent);\n    RightArm.setVelocity(60.0, percent);\n    Claw.setVelocity(60.0, percent);\n    if (Controller2.ButtonL1.pressing()) {\n      LeftArm.spin(reverse);\n      RightArm.spin(reverse);\n    }\n    else {\n      if (Controller2.ButtonL2.pressing()) {\n        LeftArm.spin(forward);\n        RightArm.spin(forward);\n      }\n      else {\n        LeftArm.stop();\n        RightArm.stop();\n      }\n    }\n    if (Controller2.ButtonUp.pressing()) {\n      Intake.spin(forward);\n    }\n    else {\n      if (Controller2.ButtonDown.pressing()) {\n        Intake.spin(reverse);\n      }\n      else {\n        Intake.stop();\n      }\n    }\n    if (Controller2.ButtonR1.pressing()) {\n      Claw.spin(forward);\n    }\n    else {\n      if (Controller2.ButtonR2.pressing()) {\n        Claw.spin(reverse);\n      }\n      else {\n        Claw.stop();\n      }\n    }\n  wait(5, msec);\n  }\n  return 0;\n}\n\n// \"when autonomous\" hat block\nint onauton_autonomous_0() {\n  LeftArm.setVelocity(100.0, percent);\n  RightArm.setVelocity(100.0, percent);\n  Drivetrain.driveFor(forward, 52.0, inches, true);\n  LeftArm.spinFor(forward, 180.0, degrees, true);\n  RightArm.spinFor(forward, 180.0, degrees, true);\n  wait(1.0, seconds);\n  Drivetrain.driveFor(reverse, 52.0, inches, true);\n  LeftArm.spinFor(reverse, 90.0, degrees, true);\n  RightArm.spinFor(reverse, 90.0, degrees, true);\n  wait(1.5, seconds);\n  Drivetrain.driveFor(reverse, 10.5, inches, true);\n  Drivetrain.turnFor(left, 90.0, degrees, true);\n  Drivetrain.driveFor(forward, 30.0, inches, true);\n  Drivetrain.turnFor(right, 90.0, degrees, true);\n  Drivetrain.driveFor(forward, 5.0, inches, true);\n  LeftArm.setVelocity(60.0, percent);\n  RightArm.setVelocity(60.0, percent);\n  return 0;\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  LeftArm.setRotation(0.0, degrees);\n  RightArm.setRotation(0.0, degrees);\n  Intake.setVelocity(100.0, percent);\n  Drivetrain.setDriveVelocity(60.0, percent);\n  Drivetrain.setTurnVelocity(50.0, percent);\n  return 0;\n}\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n  vex::task drive0(ondriver_drivercontrol_0);\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  drive0.stop();\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n  vex::task auto0(onauton_autonomous_0);\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  auto0.stop();\n  return;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","textLanguage":"cpp","rconfig":[{"port":[1,2,4,5,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"14.5","unit":"in","wheelbase":"10.5","wheelbaseUnit":"in","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":null},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"tank","id":"primary"},"triportSourcePort":22},{"port":[20],"name":"LeftArm","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"up","rev":"down","gear":"ratio18_1"},"triportSourcePort":22},{"port":[11],"name":"RightArm","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"up","rev":"down","gear":"ratio18_1"},"triportSourcePort":22},{"port":[15],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[],"name":"Controller2","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"Intake","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"partner"},"triportSourcePort":22},{"port":[3],"name":"Claw","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20211013.15.00.00","appVersion":"2.2.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}